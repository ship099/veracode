name: Veracode Build
on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      ref:
        required: true
        type: string
      token:
        required: true
        type: string
      event_name:
        required: true
        type: string
      build_runs_on:
        required: true
        type: string
      build_packager_image:
        required: true
        type: string
      build_predependency_command:
        required: true
        type: string
      ruby_version:
        required: true
        type: string
      bundle_version:
        required: true
        type: string

jobs:
  build:
    runs-on: 'windows-latest'
    env:
      VERACODE_API_KEY_ID: '${{ secrets.VERACODE_API_ID }}'
      VERACODE_API_KEY_SECRET: '${{ secrets.VERACODE_API_KEY }}'

    steps:
      - uses: actions/checkout@v4
        with:
          path: 'veracode-helper'

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          token: ${{ inputs.token }}
          path: 'source-code'

      # ---------------- Linux/Ubuntu packaging ----------------
      - name: Package the application (Linux)
        id: application_package_linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          if [[ ! -z "${{ inputs.build_predependency_command }}" ]]; then
            echo "Executing Pre-Build Dependency.."
            ${{ inputs.build_predependency_command }}
          else
            echo "No Pre-Build Dependency provided."
          fi

          if [[ "${{ inputs.event_name }}" == *"ruby"* ]]; then
            source /etc/profile.d/rvm.sh
            rvm pkg install openssl
            rvm install ruby-${{ inputs.ruby_version }}
          fi

          working_path=$(pwd)
          echo "working_dir=$working_path" >> "$GITHUB_OUTPUT"

          cd veracode-helper/helper/cli
          cliFile=$(ls -1 . | head -n 1)
          cliFileName=$(echo "$cliFile" | cut -c 1-$((${#cliFile}-7)))
          tar -zxvf $cliFile
          cd $cliFileName
          export PATH="veracode-helper/helper/cli/$cliFileName:$PATH"
          cd $working_path

          if [[ "${{ inputs.event_name }}" == *"ruby"* ]]; then
            gem install --install-dir source-code veracode
            cd source-code
            gem install bundler -v ${{ inputs.bundle_version }}
            bundle install
            cd ..
          fi

          veracode package --source source-code --output veracode-artifacts --trust

      # ---------------- Windows packaging ----------------
      - name: Package the application (Windows)
        id: application_package_windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-ExecutionPolicy AllSigned -Scope Process -Force
          $ProgressPreference = "silentlyContinue"
          iex ((New-Object System.Net.WebClient).DownloadString('https://tools.veracode.com/veracode-cli/install.ps1'))
          $VERACODE_CLI = Get-Command veracode | Select-Object -ExpandProperty Definition
          Write-Host "##vso[task.setvariable variable=VERACODE_CLI]$VERACODE_CLI"
          # Check if MSBuild is already available in PATH
          try {
            $msbuildAlreadyExists = Get-Command msbuild.exe -ErrorAction SilentlyContinue
          } catch {
            $msbuildAlreadyExists = $false
          }
          Write-Host "MSBuild install check: $msbuildAlreadyExists"
          if (-not $msbuildAlreadyExists) {
            $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            # Use a fallback check instead of Test-Path for broader compatibility
            try {
              if ([System.IO.File]::Exists($vswherePath)) {
                Write-Host "vswherePath install check: $vswherePath"
                $msbuildPath = & $vswherePath -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
                if ($msbuildPath) {
                  $msbuildDir = [System.IO.Path]::GetDirectoryName($msbuildPath)
                  Write-Host "msbuildDir install check: $msbuildDir"
                  #$env:PATH = $msbuildDir + ";" + $env:PATH
                  if ($msbuildDir -and -not ($env:PATH.Split(";") | Where-Object { $_.TrimEnd('\') -ieq $msbuildDir.TrimEnd('\') })) {
                    $env:PATH = $msbuildDir + ";" + $env:PATH
                    Write-Host "msbuild path added: $env:PATH"
                  }
                }
              }
            } catch {
              Write-Host "ProgressPreference catch block: $ProgressPreference"
              # Silently ignore errors
            }
          }
          & $VERACODE_CLI package --source source-code --output veracode-artifacts --trust

      # ---------------- Error handler ----------------
      - name: Package error
        if: failure()
        run: |
          echo "::error::Veracode static scan faced a problem. Please contact your Veracode administrator for more information."

      # ---------------- Upload artifact ----------------
      - uses: actions/upload-artifact@v4
        with:
          name: veracode-artifact
          path: "${{ steps.application_package_linux.outputs.working_dir || steps.application_package_windows.outputs.working_dir }}/veracode-artifacts/*"
          if-no-files-found: error
